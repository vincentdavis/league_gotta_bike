"""Django settings for league_gotta_bike project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

import dj_database_url
import logfire

from .config import settings as env_settings

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Logfire Configuration
# https://logfire.pydantic.dev/docs/integrations/django/
if env_settings.LOGFIRE_TOKEN:
    logfire.configure(
        token=env_settings.LOGFIRE_TOKEN,
        service_name="league-gotta-bike",
        console=logfire.ConsoleOptions(verbose=env_settings.DEBUG),
    )
    # Instrument Django to track requests, responses, database queries, and middleware
    logfire.instrument_django()
else:
    # For local development without a token, use console-only logging
    logfire.configure(
        send_to_logfire=False,
        console=logfire.ConsoleOptions(verbose=env_settings.DEBUG),
    )
    if env_settings.DEBUG:
        logfire.instrument_django()


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env_settings.SECRET_KEY

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env_settings.DEBUG

ALLOWED_HOSTS = env_settings.ALLOWED_HOSTS

CSRF_TRUSTED_ORIGINS = env_settings.CSRF_TRUSTED_ORIGINS

INTERNAL_IPS = env_settings.INTERNAL_IPS

# Application definition
TAILWIND_APP_NAME = "theme"

# Application definition

DEFAULT_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]
LOCAL_APPS = ["accounts", "apps.organizations", "apps.membership", "apps.events", "apps.messaging"]

# Conditionally add debug tools only in DEBUG mode
ADDON_APPS = [
    "tailwind",
    "theme",
    "push_notifications",
    "django_tasks",
    "django_tasks.backends.database",
    "channels",
    "allauth",
    "allauth.account",
    "allauth.mfa",
    "anymail",
    "phonenumber_field",
    "django_htmx",
]
if DEBUG:
    ADDON_APPS += ["debug_toolbar", "django_browser_reload", "reset_migrations"]

# Daphne must be listed before django.contrib.staticfiles
INSTALLED_APPS = ["daphne"] + DEFAULT_APPS + LOCAL_APPS + ADDON_APPS

# Custom User Model
AUTH_USER_MODEL = "accounts.User"

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",  # Serve static files with WhiteNoise
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_htmx.middleware.HtmxMiddleware",
    "allauth.account.middleware.AccountMiddleware",
]

# Add debug middleware only in DEBUG mode
if DEBUG:
    MIDDLEWARE += [
        "debug_toolbar.middleware.DebugToolbarMiddleware",
        "django_browser_reload.middleware.BrowserReloadMiddleware",
    ]

# Authentication Backends
AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin
    "django.contrib.auth.backends.ModelBackend",
    # allauth specific authentication methods, such as login by email
    "allauth.account.auth_backends.AuthenticationBackend",
]

ROOT_URLCONF = "league_gotta_bike.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "league_gotta_bike.context_processors.mfa_settings",
            ],
        },
    },
]

WSGI_APPLICATION = "league_gotta_bike.wsgi.application"
ASGI_APPLICATION = "league_gotta_bike.asgi.application"

# Django Channels Configuration
# https://channels.readthedocs.io/en/stable/topics/channel_layers.html

CHANNEL_LAYERS = {
    "default": {
        # Use in-memory channel layer for development
        # For production, use Redis: 'channels_redis.core.RedisChannelLayer'
        "BACKEND": "channels.layers.InMemoryChannelLayer",
    }
}

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Parse DATABASE_URL from environment variable
# Default to SQLite for local development if DATABASE_URL is not set
DATABASES = {
    "default": dj_database_url.parse(
        env_settings.DATABASE_URL,
        conn_max_age=600,
        conn_health_checks=True,
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

# WhiteNoise Configuration
# http://whitenoise.evans.io/
STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# Media files (User uploaded content)
# https://docs.djangoproject.com/en/5.2/topics/files/

MEDIA_URL = "media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Django Tasks Configuration
# https://django-tasks.readthedocs.io/

TASKS = {
    "default": {
        "BACKEND": "django_tasks.backends.database.DatabaseBackend",
        "QUEUES": ["default", "high_priority", "low_priority"],
    }
}

# Email Configuration (django-anymail with Resend)
# https://anymail.dev/en/stable/esps/resend/

# For development: use console backend to see emails in terminal
if DEBUG:
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
else:
    EMAIL_BACKEND = "anymail.backends.resend.EmailBackend"
    ANYMAIL = {
        "RESEND_API_KEY": env_settings.RESEND_API_KEY,
    }

DEFAULT_FROM_EMAIL = env_settings.DEFAULT_FROM_EMAIL

# Sinch SMS Verification Configuration
# https://developers.sinch.com/docs/sms/api-reference/
SINCH_SMS_AUTH_TOKEN = env_settings.SINCH_SMS_AUTH_TOKEN
SINCH_PLAN_ID = env_settings.SINCH_PLAN_ID
SINCH_URL = env_settings.SINCH_URL
SINCH_FROM_NUMBER = env_settings.SINCH_FROM_NUMBER

# Django-allauth Configuration
# https://docs.allauth.org/

# Custom adapter for logging
ACCOUNT_ADAPTER = "accounts.adapter.AccountAdapter"

# Account settings
ACCOUNT_LOGIN_METHODS = {"username"}  # Use username for login
ACCOUNT_EMAIL_VERIFICATION = "mandatory"  # Email verification required to activate account
ACCOUNT_SIGNUP_FIELDS = [
    "email*",
    "username*",
    "first_name*",
    "last_name*",
    "password1*",
    "password2*",
]  # Required signup fields

# Email verification settings
ACCOUNT_EMAIL_VERIFICATION_BY_CODE_ENABLED = True  # Enable code-based email verification (required for passkey signup)
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True  # Auto-login after email confirmation

# User fields configuration
ACCOUNT_USER_MODEL_USERNAME_FIELD = "username"
ACCOUNT_USER_MODEL_EMAIL_FIELD = "email"

# Session settings
ACCOUNT_SESSION_REMEMBER = True  # Remember user session

# MFA Configuration
# https://docs.allauth.org/en/dev/mfa/configuration.html

MFA_SUPPORTED_TYPES = ["recovery_codes", "totp", "webauthn"]  # Enable TOTP, WebAuthn/passkeys, and recovery codes
MFA_PASSKEY_LOGIN_ENABLED = True  # Enable passkey login
MFA_PASSKEY_SIGNUP_ENABLED = True  # Enable passkey signup
MFA_TOTP_PERIOD = 30  # TOTP time period in seconds
MFA_TOTP_DIGITS = 6  # Number of digits in TOTP code
MFA_RECOVERY_CODE_COUNT = 10  # Number of recovery codes to generate

# Redirect URLs
LOGIN_REDIRECT_URL = "/"  # Redirect after successful login
ACCOUNT_LOGOUT_REDIRECT_URL = "/"  # Redirect after logout

# Django Phone Number Field Configuration
# https://github.com/stefanfoulis/django-phonenumber-field
PHONENUMBER_DEFAULT_REGION = "US"  # Default region for phone numbers
PHONENUMBER_DEFAULT_FORMAT = "NATIONAL"  # Display format for phone numbers

# Logging Configuration
# https://docs.djangoproject.com/en/5.2/topics/logging/

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
    },
    "loggers": {
        "accounts": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
        "allauth": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
    },
}
