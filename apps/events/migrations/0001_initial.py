# Generated by Django 5.2.6 on 2025-10-19 01:30

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('organizations', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Event title', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Event description and details')),
                ('event_type', models.CharField(choices=[('practice', 'Practice'), ('race', 'Race/Competition'), ('meeting', 'Meeting'), ('social', 'Social Event'), ('fundraiser', 'Fundraiser'), ('training', 'Training Session'), ('other', 'Other')], default='practice', help_text='Type of event', max_length=20)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('cancelled', 'Cancelled')], default='published', help_text='Event status', max_length=20)),
                ('start_datetime', models.DateTimeField(help_text='Event start date and time')),
                ('end_datetime', models.DateTimeField(help_text='Event end date and time')),
                ('all_day', models.BooleanField(default=False, help_text='Is this an all-day event?')),
                ('location', models.CharField(blank=True, help_text='Event location or venue', max_length=200)),
                ('location_address', models.TextField(blank=True, help_text='Full address')),
                ('location_url', models.URLField(blank=True, help_text='URL to location/map')),
                ('recurrence', models.CharField(choices=[('none', 'Does not repeat'), ('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly')], default='none', help_text='Recurrence pattern', max_length=20)),
                ('recurrence_end_date', models.DateField(blank=True, help_text='When to stop recurring events', null=True)),
                ('max_attendees', models.PositiveIntegerField(blank=True, help_text='Maximum number of attendees (leave blank for unlimited)', null=True)),
                ('registration_required', models.BooleanField(default=False, help_text='Require registration/RSVP?')),
                ('registration_deadline', models.DateTimeField(blank=True, help_text='Deadline for registration/RSVP', null=True)),
                ('is_public', models.BooleanField(default=False, help_text='Is this event visible to non-members?')),
                ('notes', models.TextField(blank=True, help_text='Internal notes (not visible to attendees)')),
                ('equipment_needed', models.TextField(blank=True, help_text='Required equipment or gear')),
                ('cost', models.DecimalField(blank=True, decimal_places=2, help_text='Cost per attendee (if applicable)', max_digits=10, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(help_text='User who created this event', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_events', to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(help_text='Organization hosting this event', on_delete=django.db.models.deletion.CASCADE, related_name='events', to='organizations.organization')),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
                'ordering': ['-start_datetime'],
            },
        ),
        migrations.CreateModel(
            name='EventAttendee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('attending', 'Attending'), ('not_attending', 'Not Attending'), ('maybe', 'Maybe'), ('no_response', 'No Response')], default='no_response', help_text='RSVP status', max_length=20)),
                ('response_date', models.DateTimeField(auto_now=True, help_text='When user responded')),
                ('checked_in', models.BooleanField(default=False, help_text='Did attendee check in at event?')),
                ('checked_in_at', models.DateTimeField(blank=True, help_text='Check-in timestamp', null=True)),
                ('notes', models.TextField(blank=True, help_text='Attendee notes or comments')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendees', to='events.event')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_attendance', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Event Attendee',
                'verbose_name_plural': 'Event Attendees',
                'ordering': ['event', 'user'],
            },
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['organization', 'start_datetime'], name='events_even_organiz_2bfda7_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['event_type', 'start_datetime'], name='events_even_event_t_afaaa8_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['status'], name='events_even_status_5709b6_idx'),
        ),
        migrations.AddIndex(
            model_name='eventattendee',
            index=models.Index(fields=['event', 'status'], name='events_even_event_i_3ca279_idx'),
        ),
        migrations.AddIndex(
            model_name='eventattendee',
            index=models.Index(fields=['user', 'status'], name='events_even_user_id_461b08_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='eventattendee',
            unique_together={('event', 'user')},
        ),
    ]
